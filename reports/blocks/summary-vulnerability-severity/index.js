const partialName = 'summary-vulnerability-severity';
const reportConfigurableHelper = require('../../../helpers/report-configurable');
const mongoHelper = require('../../../helpers/mongo');
const hasProperty = require('../../../helpers/general').hasProperty;
const vulnerabilityModel = require('../../../models/vulnerability');
const handlebars = require('handlebars');
const config = require('config');
const MongoObjectId = require('mongodb').ObjectID;
const _ = require('lodash');
const Promise = require('bluebird');

const build = (organisationId, reportIds) => {
  // Register the partial
  handlebars.registerPartial(partialName,
    reportConfigurableHelper.fsReadBlockTemplate(partialName));

  // Convert the report IDs into Mongo IDs
  const mongoReportIds = [];

  _.each(reportIds, function (reportId) {
    mongoReportIds.push(new MongoObjectId(reportId));
  });

  // Get the vulnerabilities for this report and group them
  const aggregationQuery = [
    {
      $lookup: {
        from: config.mongo.tables.vulnerabilities,
        localField: 'vulnerabilities',
        foreignField: '_id',
        as: 'vulnerabilities'
      }
    },
    { $unwind: { path: "$vulnerabilities", "preserveNullAndEmptyArrays": true } },
    { $match: { _id: { $in: mongoReportIds } } },
    {
      $project: {
        vulnerabilities: 1,
        report_name: 1
      }
    }
  ];

  const reportCollectionPromise = mongoHelper.collection(organisationId,
    config.mongo.tables.reports);

  return reportCollectionPromise.then((vulnerabilityCollection) => {
    const reportsCursor = vulnerabilityCollection.aggregate(aggregationQuery);

    return reportsCursor.toArray().then(function (reportsWithVulnerabilities) {
      reportsWithVulnerabilities = vulnerabilityModel.formatReportFields(reportsWithVulnerabilities);
      
      return {
        organisationId,
        reports: reportsWithVulnerabilities
      };
    }, function (error) {
      return Promise.reject(error);
    });
  }, function (error) {
    return Promise.reject(error);
  });
};

/**
 * Prepares the data from the above request if required
 * @param {Mixed} values The values from the `build` method above
 */
const prepare = (values) => {
  // Flatten the severity results
  const flattenedSeverities = {};
  const severities = vulnerabilityModel.vulnerability().severities;
  let totalVulnerabilityCount = 0;

  _.each(severities, function (severityName, code) {
    flattenedSeverities[code] = {
      severityName,
      count: 0
    };
  });

  _.each(values.reports, function (report) {
    _.each(report.vulnerabilities, function (vulnerability) {
      const reportId = report._id;
      const severityId = vulnerability.severity;
      
      if (flattenedSeverities[severityId]) {
        flattenedSeverities[severityId].count += 1;

        // Add reports if there are some to add
        if (!hasProperty(flattenedSeverities[severityId], 'reports')) {
          flattenedSeverities[severityId].reports = {};
        }

        if (!hasProperty(flattenedSeverities[severityId].reports, reportId)) {
          flattenedSeverities[severityId].reports[reportId] = {
            name: report.report_name,
            count: 0
          };
        }

        flattenedSeverities[severityId].reports[reportId].count += 1;
      }

      totalVulnerabilityCount += 1;
    });
  });

  flattenedSeverities.total = { severityName: 'Total', count: totalVulnerabilityCount };
  values.reports.severityCounts = flattenedSeverities;
  return { severityCounts: values.reports.severityCounts, organisationId: values.organisationId };
};

module.exports.build = build;
module.exports.partialName = partialName;
module.exports.prepare = prepare;
