const partialName = 'summary-vulnerability-repeated';
const reportConfigurableHelper = require('../../../helpers/report-configurable');
const reportModel = require('../../../models/reports');
const handlebars = require('handlebars');
const Promise = require('bluebird');

const build = (organisationId, reportIds) => {
  if (reportIds.length !== 1) {
    return Promise.reject('Repeated vulnerability block can only support a single report');
  }

  const reportId = reportIds[0];

  // Register the partial
  handlebars.registerPartial(partialName,
    reportConfigurableHelper.fsReadBlockTemplate(partialName));

  // Get this report and the most recent report
  return reportModel.getById(organisationId, reportId).then(function (currentReport) {
    return reportModel.getPreviousReport(organisationId, reportId).then(function (previousReport) {
      if (previousReport === null) {
        return null;
      }

      // "Stupid" check - the same reports shouldn't be compared
      if (currentReport._id === previousReport._id) {
        return Promise.reject(
          'ERROR: the same two reports are being compared for repeat vulnerabilities');
      }

      return reportModel.extractRepeatedInformation(organisationId, currentReport, previousReport)
        .then(function (summary) {
          return { summary };
        });
    });
  });
};

module.exports.build = build;
module.exports.partialName = partialName;
